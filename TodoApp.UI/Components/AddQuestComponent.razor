@using Blazored.FluentValidation
@using TodoApp.Shared.DTO;

<button class="btn btn-primary" @onclick="OpenModal" data-name="quest-add-button">
    Add
    <span class="oi oi-task"></span>
</button>

@if (IsModalOpen)
{
    <ModalComponent Title="Create Quest" OnClose="CloseModal">
        <Content>
            <div>
                <EditForm Model="@Quest" OnValidSubmit="@HandleValidSubmit">
                    <FluentValidationValidator />
                    <div class="modal-body">
                        <div>
                            <div class="form-group mt-2">
                                <label data-name="quest-title-label">Title</label>
                                <InputText class="form-control" @bind-Value="Quest.Title" data-name="quest-title-input" />
                                <ValidationMessage For="@(() => Quest.Title)" data-name="quest-title-validation" />
                            </div>
                            <div class="form-group mt-2">
                                <label data-name="quest-description-label">Description</label>
                                <InputTextArea class="form-control" @bind-Value="Quest.Description" data-name="quest-description-input" />
                                <ValidationMessage For="@(() => Quest.Description)" data-name="quest-description-validation"/>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <div>
                            <button class="btn btn-success me-2" type="submit" data-name="quest-submit-button">
                                Add
                            </button>
                            <button class="btn btn-secondary" type="button" @onclick="CloseModal" data-name="quest-close-button">
                                Cancel
                            </button>
                        </div>
                    </div>
                </EditForm>
             </div>
        </Content>
    </ModalComponent>
}

@code {
    [Parameter]
    public EventCallback<QuestDto> OnAdd { get; set; }

    public bool IsModalOpen { get; private set; } = false;

    public void OpenModal()
    {
        IsModalOpen = true;
    }

    public void CloseModal()
    {
        IsModalOpen = false;
        Quest = new QuestDto();
    }

    public QuestDto Quest { get; private set; } = new();

    private async Task HandleValidSubmit()
    {
        await OnAdd.InvokeAsync(new QuestDto
        {
            Id = Quest.Id,
            Title = Quest.Title,
            Status = Quest.Status,
            Description = Quest.Description,
            Created = Quest.Created,
            Modified = Quest.Modified
        });
        CloseModal();
    }
}
